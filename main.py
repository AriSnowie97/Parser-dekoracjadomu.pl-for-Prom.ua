import telebot
import os
import pandas as pd
import time
import threading
import sys
from uuid import uuid4
from playwright.sync_api import sync_playwright, TimeoutError

BOT_TOKEN = "BOT_TOKEN"
bot = telebot.TeleBot(BOT_TOKEN)

user_state = {}

@bot.message_handler(commands=["start"])
def start_cmd(message):
    user_state[message.chat.id] = None  # —Å–±—Ä–æ—Å
    bot.send_message(message.chat.id, (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–∞—Ä—Å–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–∞–π—Ç–∞ dekoracjadomu.pl\n\n"
        "üîß –ö–æ–º–∞–Ω–¥—ã:\n"
        "/parsing_catalogs ‚Äì –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞\n"
        "/parsing_product ‚Äì –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞\n"
        "/stop ‚Äì –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ (–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞)\n\n"
        "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É üîó"
    ))

@bot.message_handler(commands=["parsing_catalogs"])
def parse_catalog_cmd(message):
    user_state[message.chat.id] = "catalog"
    bot.send_message(message.chat.id, "üì• –ñ–¥—É —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤.")

@bot.message_handler(commands=["parsing_product"])
def parse_product_cmd(message):
    user_state[message.chat.id] = "product"
    bot.send_message(message.chat.id, "üì• –ñ–¥—É —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞.")

@bot.message_handler(commands=["stop"])
def shutdown_cmd(message):
    bot.send_message(message.chat.id, "üõë –ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
    user_state[message.chat.id] = None

    def shutdown():
        time.sleep(1)
        print("‚ùå –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")
        os._exit(0)  # –∂—ë—Å—Ç–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞

    threading.Thread(target=shutdown).start()

@bot.message_handler(func=lambda m: True)
def handle_link(message):
    text = message.text.strip()
    state = user_state.get(message.chat.id)

    if text.startswith("http"):
        if state == "catalog":
            bot.send_message(message.chat.id, "‚è≥ –ü–∞—Ä—Å—é –∫–∞—Ç–∞–ª–æ–≥...")
            try:
                file_path = parse_catalog_to_excel(text)
                send_excel_or_path(bot, message, file_path)
            except Exception as e:
                bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
            user_state[message.chat.id] = None  # —Å–±—Ä–æ—Å

        elif state == "product":
            bot.send_message(message.chat.id, "‚è≥ –ü–∞—Ä—Å—é –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞...")
            try:
                file_path = parse_single_product_to_excel(text)
                send_excel_or_path(bot, message, file_path)
            except Exception as e:
                bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–æ–≤–∞—Ä–∞: {e}")
            user_state[message.chat.id] = None  # —Å–±—Ä–æ—Å

        else:
            bot.send_message(message.chat.id, "‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É:\n/–ø–∞—Ä—Å–∏—Ç—å_–∫–∞—Ç–∞–ª–æ–≥–∏ –∏–ª–∏ /–ø–∞—Ä—Å–∏—Ç—å_–∫–∞—Ä—Ç–æ—á–∫—É")
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É, –Ω–∞—á–∏–Ω–∞—è —Å http.")

def send_excel_or_path(bot, message, filepath):
    try:
        with open(filepath, 'rb') as f:
            bot.send_document(message.chat.id, f)
        os.remove(filepath)
    except:
        bot.send_message(message.chat.id, f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {filepath}")

def parse_catalog_to_excel(url: str) -> str:
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        page = browser.new_page()
        page.goto(url, wait_until="networkidle", timeout=60000)
        time.sleep(5)

        page.wait_for_selector("article.product-miniature.js-product-miniature", timeout=30000)
        products = page.query_selector_all("article.product-miniature.js-product-miniature")

        data = []
        for product in products:
            try:
                name_el = product.query_selector("h2.product-title a")
                price_el = product.query_selector("span.price")
                img_el = product.query_selector("a.thumbnail.product-thumbnail img")

                if not name_el or not price_el:
                    continue

                name = name_el.inner_text().strip()
                link = name_el.get_attribute("href")
                price = price_el.inner_text().strip()
                img_url = img_el.get_attribute("data-src") or img_el.get_attribute("src") if img_el else None

                data.append({
                    "–ù–∞–∑–≤–∞–Ω–∏–µ": name,
                    "–°—Å—ã–ª–∫–∞": link,
                    "–¶–µ–Ω–∞": price,
                    "–§–æ—Ç–æ": img_url
                })
            except:
                continue

        browser.close()
        filename = f"catalog_{uuid4().hex}.xlsx"
        pd.DataFrame(data).to_excel(filename, index=False)
        return filename

def parse_single_product_to_excel(url: str) -> str:
    from uuid import uuid4
    import pandas as pd
    import time
    from playwright.sync_api import sync_playwright

    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        page = browser.new_page()
        page.goto(url, wait_until="networkidle", timeout=60000)
        time.sleep(5)

        def safe_text(sel):
            el = page.query_selector(sel)
            return el.inner_text().strip() if el else "‚Äî"

        name = safe_text("h1")  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤ h1
        sku = safe_text("text=Numer katalogowy ~ span")  # –¢–æ—á–Ω—ã–π –ø—É—Ç—å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
        price = safe_text("text= z≈Ç")  # –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å —á–µ—Ä–µ–∑ unique selector
        description = safe_text("section:has-text(\"Opis\")")
        specs = safe_text("section:has-text(\"Specyfikacja\")")
        
        images = page.query_selector_all("img")
        image_urls = [img.get_attribute("src") or img.get_attribute("data-src") for img in images][:3]

        data = {
            "–ù–∞–∑–≤–∞–Ω–∏–µ": name,
            "–ê—Ä—Ç–∏–∫—É–ª": sku,
            "–¶–µ–Ω–∞": price,
            "–û–ø–∏—Å–∞–Ω–∏–µ": description,
            "–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è": specs,
            "–§–æ—Ç–æ 1": image_urls[0] if len(image_urls) > 0 else "",
            "–§–æ—Ç–æ 2": image_urls[1] if len(image_urls) > 1 else "",
            "–§–æ—Ç–æ 3": image_urls[2] if len(image_urls) > 2 else "",
            "–°—Å—ã–ª–∫–∞": url
        }
        df = pd.DataFrame([data])
        filename = f"product_{uuid4().hex}.xlsx"
        df.to_excel(filename, index=False)
        browser.close()
        return filename

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
bot.polling(none_stop=True)
